using RiskAdjustedLinearizations, JLD2, Test
include(joinpath(dirname(@__FILE__), "..", "..", "examples", "crw", "crw.jl"))

# Solve model
m_crw = CoeurdacierReyWinant()
m = crw(m_crw)
solve!(m, m.z, m.y, m.Œ®; algorithm = :homotopy)

# Calculate consumption at state z‚Çú
crw_c‚Çú(m, z‚Çú) = m.y[1] + (m.Œ® * (z‚Çú - m.z))[1]

# Evaluates m_{t + 1} + r_{t + 1}
function crw_logSDFxR(m, z‚Çú, Œµ‚Çú‚Çä‚ÇÅ, c‚Çú)
    z‚Çú‚Çä‚ÇÅ, y‚Çú‚Çä‚ÇÅ = simulate(m, Œµ‚Çú‚Çä‚ÇÅ, z‚Çú)

    return log(m_crw.Œ≤) - m_crw.Œ≥ * (y‚Çú‚Çä‚ÇÅ[1] - c‚Çú) + z‚Çú‚Çä‚ÇÅ[2]
end

# Calculate ùîº‚Çú[exp(m‚Çú‚Çä‚ÇÅ + r‚Çú‚Çä‚ÇÅ)] via quadrature
std_norm_mean = zeros(2)
std_norm_sig  = ones(2)
crw_ùîº_quadrature(f::Function) = gausshermite_expectation(f, std_norm_mean, std_norm_sig, 10)

# Load draws from bivariate standard normal
shocks = JLD2.jldopen(joinpath(dirname(@__FILE__), "..", "reference", "crw_shocks.jld2"), "r")["shocks"]

# Calculate Euler Equation errors
@test abs.(euler_equation_error(m, crw_c‚Çú, crw_logSDFxR, crw_ùîº_quadrature; c_init = m.y[1] * 1.1)) < 1e-11
@test abs.(euler_equation_error(m, crw_c‚Çú, crw_logSDFxR, crw_ùîº_quadrature, m.z * 1.1; c_init = m.y[1] * 1.1)) < 1e-5
@test abs.(euler_equation_error(m, crw_c‚Çú, crw_logSDFxR, crw_ùîº_quadrature, m.z * 1.1; c_init = m.y[1] * 1.1, method = :newton)) < 1e-5
@test abs(euler_equation_error(m, crw_c‚Çú, crw_logSDFxR, crw_ùîº_quadrature, shocks, x -> norm(x, Inf))) < 7e-4
@test abs(euler_equation_error(m, crw_c‚Çú, crw_logSDFxR, crw_ùîº_quadrature, shocks, x -> norm(x, 2))) < 2e-3
@test abs(euler_equation_error(m, crw_c‚Çú, crw_logSDFxR, crw_ùîº_quadrature, shocks, x -> mean(abs.(x)))) < 6e-5
