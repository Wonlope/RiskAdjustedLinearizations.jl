using UnPack, OrderedCollections, LinearAlgebra, JLD2

# Load guesses
sssout = JLD2.jldopen(joinpath(dirname(@__FILE__), "../../test/reference/crw_sss.jld2"), "r")

zguess = vec(sssout["z_rss"])
yguess = vec(sssout["y_rss"])
Psiguess = sssout["Psi_rss"]

mutable struct CoeurdacierReyWinant{T <: Real}
    œÉr::T # SD of interest rate shocks
    œÉy::T # SD of endowment shocks
    Œ≤::T  # intertemporal discount rate
    Œ≥::T  # risk aversion coefficient
    Œ∏::T
    œÅr::T # persistence of interest rate
    œÅy::T # persistence of endowment
    rr::T # long-run interest rate
    yy::T # long-run endowment
end

function CoeurdacierReyWinant(; œÉr::T = .025, œÉy::T = .025, Œ≤::T = .96, Œ≥::T = 2.,
                              Œ∏::T = 1., œÅr::T = .9, œÅy::T = .9, rr::T = .01996, yy::T = log(Œ∏)) where {T <: Real}
    return CoeurdacierReyWinant{T}(œÉr, œÉy, Œ≤, Œ≥, Œ∏, œÅr, œÅy, rr, yy)
end

function crw(m::CoeurdacierReyWinant{T}) where {T <: Real}
    @unpack œÉr, œÉy, Œ≤, Œ≥, Œ∏, œÅr, œÅy, rr, yy = m

    # N = exp(r‚Çú) * A‚Çú‚Çã‚ÇÅ + Y‚Çú, where A‚Çú is foreign assets and Y‚Çú is the endowment
    # The jump variables are consumption, expected return on assets X‚Çú = ùîº‚Çú[R‚Çú‚Çä‚ÇÅ], and
    # W‚Çú = ùîº‚Çú[Y‚Çú‚Çä‚ÇÅ]
    S  = OrderedDict{Symbol, Int}(:N => 1, :r => 2, :y => 3) # State variables
    J  = OrderedDict{Symbol, Int}(:c => 1, :x => 2, :w => 3) # Jump variables
    SH = OrderedDict{Symbol, Int}(:Œµr => 1, :Œµy => 2)        # Exogenous shocks
    Nz = length(S)
    Ny = length(J)
    NŒµ = length(SH)

    function Œº(F, z, y) # note that y here refers to jump variables
        F[S[:N]] = exp(y[J[:w]]) + exp(y[J[:x]]) * (z[S[:N]] - exp(y[J[:c]]))
        F[S[:r]] = (1 - œÅr) * rr + œÅr * z[S[:r]]
        F[S[:y]] = (1 - œÅy) * yy + œÅy * z[S[:y]]
    end

    function Œæ(F, z, y)
        F[J[:c]] = log(Œ≤) + Œ≥ * y[J[:c]]    # Euler equation
        F[J[:x]] = -y[J[:x]]                # r‚Çú‚Çä‚ÇÅ - x‚Çú, rational expectations
        F[J[:w]] = -y[J[:w]]                # y‚Çú‚Çä‚ÇÅ - w‚Çú
    end

    # The cache is initialized as zeros so we only need to fill non-zero elements
    function Œõ(F, z, y)
        F_type = eltype(F)
        F[S[:N], J[:x]] = z[S[:N]] - exp(y[J[:c]])
        F[S[:N], J[:w]] = 1.
    end

    # The cache is initialized as zeros so we only need to fill non-zero elements
    function Œ£(F, z, y)
        F_type = eltype(F)
        F[S[:r], SH[:Œµr]] = œÉr
        F[S[:y], SH[:Œµy]] = œÉy
    end

    function ccgf(F, Œ±, z)
        F .= .5 * diag(Œ± * Œ±')
    end

    Œì‚ÇÖ = zeros(T, Ny, Nz)
    Œì‚ÇÖ[J[:c], S[:r]] = 1.
    Œì‚ÇÖ[J[:x], S[:r]] = 1.
    Œì‚ÇÖ[J[:w], S[:y]] = 1.

    Œì‚ÇÜ = zeros(T, Ny, Ny)
    Œì‚ÇÜ[J[:c], J[:c]] = -Œ≥

    z = zguess
    y = yguess
    Œ® = Psiguess
    return RiskAdjustedLinearization(Œº, Œõ, Œ£, Œæ, Œì‚ÇÖ, Œì‚ÇÜ, ccgf, z, y, Œ®, NŒµ; jump_dependent_shock_matrices = true)
end
